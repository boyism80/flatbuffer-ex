{%- set namespace_f = 'FlatBuffer.' + namespace.split('.')[-1] -%}

using System.Collections.Generic;
using System.Linq;

namespace {{ namespace }}
{
    public enum Identity
    {
{%- for data in dataSet %}
        {{ data.name.upper_snake }}{% if not loop.last %},{% endif %}
{%- endfor %}
    }

    {% for data in dataSet -%}
    public class {{ data.name.upper }} : IProtocol
    {
        public uint Identity => (uint){{ namespace }}.Identity.{{ data.name.upper_snake }};

        {% for param in data.params -%}
        public {{ param.type }} {{ param.name.upper }} { get; set; }
        {%- if not loop.last %}
        {% endif %}
        {%- endfor %}

        public {{ data.name.upper }}()
        { }

        public {{ data.name.upper }}({{ namespace_f }}.{{ data.name.upper }} obj)
        {
            {% for param in data.params -%}
            {%- if param.array -%}
            this.{{ param.name.upper }} = Enumerable.Range(0, obj.{{ param.name.upper }}Length)
            {%- if param.element.name.base != 'int' -%}
            .Select(x => ({{ param.element.name.base }})System.Convert.ChangeType(x, typeof({{ param.element.name.base }})))
            {%- endif -%}
            {%- if param.element.string -%}
            .Select(x => obj.{{ param.name.upper }}(x))
            {%- elif param.element.declared -%}
            .Select(x => new {{ param.element.name.base }}(obj.{{ param.name.upper }}(x).Value))
            {%- endif -%}
            .ToList();
            {%- else -%}
            this.{{ param.name.upper }} = {% if param.primitive -%}
            obj.{{ param.name.upper }};
            {%- else -%}
            new {{ param.type }}(obj.{{ param.name.upper }}.Value);
            {%- endif -%}
            {%- endif -%}
            {%- if not loop.last %}
            {% endif %}
            {%- endfor %}
        }

        public FlatBuffers.Offset<{{ namespace_f }}.{{ data.name.upper }}> ToFlatBuffer(FlatBuffers.FlatBufferBuilder builder)
        {
            {% if data.params|length > 0 -%}
            {% for param in data.params -%}
            {%- if param.array -%}
            var _{{ param.name.lower }} = {{ namespace_f }}.{{ data.name.upper }}.Create{{ param.name.upper }}Vector(builder, this.{{ param.name.upper }}
            {%- if param.element.string -%}
            .Select(x => builder.CreateString(x))
            {%- elif param.element.declared -%}
            .Select(x => x.ToFlatBuffer(builder))
            {%- endif -%}
            .ToArray());
            {%- elif param.string -%}
            var _{{ param.name.lower }} = builder.CreateString(this.{{ param.name.upper }});
            {%- else -%}
            var _{{ param.name.lower }} = this.{{ param.name.upper }}{%- if param.declared -%}
            .ToFlatBuffer(builder)
            {%- endif -%}
            ;
            {%- endif -%}
            {%- if not loop.last %}
            {% endif %}
            {%- endfor %}

            return {{ namespace_f }}.{{ data.name.upper }}.Create{{ data.name.upper }}(builder, {% for param in data.params -%}
            _{{ param.name.lower }}
            {%- if not loop.last -%}, {% endif -%}
            {%- endfor -%}
            );
            {%- else -%}
            {{ namespace_f }}.{{ data.name.upper }}.Start{{ data.name.upper }}(builder);
            return {{ namespace_f }}.{{ data.name.upper }}.End{{ data.name.upper }}(builder);
            {%- endif %}
        }

        public byte[] Serialize()
        {
            var builder = new FlatBuffers.FlatBufferBuilder(512);
            builder.Finish(this.ToFlatBuffer(builder).Value);
            return builder.DataBuffer.ToSizedArray();
        }

        public static {{ data.name.upper }} Deserialize(byte[] bytes)
        {
            return new {{ data.name.upper }}({{ namespace_f }}.{{ data.name.upper }}.GetRootAs{{ data.name.upper }}(new FlatBuffers.ByteBuffer(bytes)));
        }
    }
    {%- if not loop.last %}

    {% endif %}
    {%- endfor %}
}