{{~
func cs_type_from_str(type)
    $result = ''
    case type
        when "string"
            $result = "string"
        when "byte"
            $result = "sbyte"
        when "ubyte"
            $result = "byte"
        when "array"
            $result = "List<" + (field.array_element | @cs_type) + ">"
        else
            $result = type
    end

    ret $result
end

func cs_type(field)
    $result = @cs_type_from_str(field.type)
    if field.refer_namespace
        $result = (field.refer_namespace | array.add $result | array.each @cs_mapped_kwd | array.join '.')
    else if field.is_custom_class
        $result = (field.scope.namespace | array.add $result | array.each @cs_mapped_kwd | array.join '.')
    end

    if field.is_nullable && field.is_primitive
        $result = $result + '?'
    end

    ret $result
end

func cs_field_to_build_param(field)
    $result = ''
    if field.type == 'string'
        $result = 'builder.CreateString(' + (field.name | upper_camel) + ')'
    else if field.is_custom_class
        $result = field.name | upper_camel + '.Build(builder)'
    else if field.type == 'array'
        $result = (field.scope.namespace | array.add 'raw' | array.add field.table.name | array.add 'Create' + (field.name | upper_camel) + 'Vector' | array.each @cs_mapped_kwd | array.join '.') + '(builder, ' + (field.name | upper_camel) + '.ConvertAll(x => x.Build(builder)).ToArray())'
    else if field.is_enum
        $result = '(' + (field.fixed_namespace | array.add 'raw' | array.add field.type | array.each @cs_mapped_kwd | array.join '.') + ')' + (field.name | upper_camel)
    else
        $result = field.name | upper_camel
    end

    if field.is_nullable
        $result = $result + '.HasValue ? nullable_' + field.type + '.Createnullable_' + field.type + '(builder, ' + (field.name | upper_camel) + '.Value) : default'
    end
    ret $result
end

func cs_raw_to_ctr_param(field)
    $result = ''
    if field.is_custom_class
        $result = 'new ' + (field.type | upper_camel) + '(raw.' + (field.name | upper_camel) + '.Value)'
    else if field.type == 'array'
        $result = 'Enumerable.Range(0, raw.' + (field.name | upper_camel) + 'Length).Select(i => new ' + (field.array_element | @cs_type) + '(raw.' + (field.name | upper_camel) + '(i).Value)).ToList()'
    else if field.is_enum
        $result = '(' + field.type + ')raw.' + (field.name | upper_camel)
    else
        $result = 'raw.' + (field.name | upper_camel)
    end

    if field.is_nullable
        if field.is_primitive
            $result = $result + '?.Value'
        else
        end
    end
    ret $result
end
~}}
using Google.FlatBuffers;
using nullable;

namespace Google.FlatBuffers
{
    public interface IFlatBufferEx
    {
        int ProtocolType { get; }
        byte[] Serialize();
    }
}

{{~ for scope in context.scopes ~}}
namespace {{ scope.namespace | array.each @cs_mapped_kwd | array.join '.' }}
{
    public enum FlatBufferProtocolType
    { 
{{~ for table in scope.tables ~}}
        {{ table.name }}{{ if !for.last }},{{ end }}
{{~ end ~}}
    }
}
{{~ end ~}}

{{~ for scope in context.scopes ~}}
namespace {{ scope.namespace | array.each @cs_mapped_kwd | array.join '.' }}
{
{{~ for enum in scope.enums ~}}
    public enum {{ enum.name }}
    {
{{~ for value in enum.values ~}}
        {{ value }},
{{~ end ~}}
    }
{{~ end ~}}

{{~ for table in scope.tables ~}}
    public class {{ table.name }} : IFlatBufferEx
    {
        public int ProtocolType => (int)FlatBufferProtocolType.{{ table.name }};
{{~ for field in table.fields ~}}
        public {{ field | @cs_type }} {{ field.name | upper_camel }} { get; set; }
{{~ end ~}}

        public {{ table.name }}()
        { }

        public {{ table.name }}({{ scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }} raw)
        {
{{~ for field in table.fields ~}}
            {{ field.name | upper_camel }} = {{ field | @cs_raw_to_ctr_param }};
{{~ end ~}}
        }

        public {{ table.name }}(byte[] bytes) : this({{ scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }}.GetRootAs{{ table.name }}(new ByteBuffer(bytes)))
        { }

        public Offset<{{ scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }}> Build(FlatBufferBuilder builder)
        {
{{~ if (table.fields | array.size) > 0 ~}}
            return {{ scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }}.Create{{ table.name }}(builder,
{{~ for field in table.fields ~}}
                {{ field | @cs_field_to_build_param }}{{ if !for.last }},
{{~ end ~}}
{{~ end ~}});
{{~ else ~}}
            {{ table.scope.namespace | array.add 'raw' | array.each @cs_mapped_kwd | array.add table.name | array.add ('Start' + table.name) | array.join '.'}}(builder);
            return {{ table.scope.namespace | array.add 'raw' | array.each @cs_mapped_kwd | array.add table.name | array.add ('End' + table.name) | array.join '.'}}(builder);
{{~ end ~}}
        }

        public byte[] Serialize()
        {
            var builder = new FlatBufferBuilder(1);
            var offset = Build(builder);
            builder.Finish(offset.Value);
            return builder.SizedByteArray();
        }

        public static {{ table.name }} Deserialize(byte[] bytes)
        {
            return new {{ table.name }}(bytes);
        }
    }
{{~ end ~}}

    public static class FlatBufferProtocolRouter
    {
        public static Type GetProtocolType(FlatBufferProtocolType protocolType)
        {
            return protocolType switch
            {
{{~ for table in scope.tables ~}}
                FlatBufferProtocolType.{{ table.name }} => typeof({{ scope.namespace | array.add table.name | array.each @cs_mapped_kwd | array.join '.'}}),
{{~ end ~}}
                _ => throw new ArgumentException(),
            };
        }
    }
}
{{~ end ~}}