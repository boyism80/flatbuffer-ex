{{~
func cs_type_from_str(type)
    $result = ''
    case type
        when "string"
            $result = "string"
        when "byte"
            $result = "sbyte"
        when "ubyte"
            $result = "byte"
        when "array"
            $result = "List<" + (field.array_element | @cs_type) + ">"
        else
            $result = type
    end

    ret $result
end

func cs_type(field)
    $result = @cs_type_from_str(field.type)
    if field.refer_namespace
        $result = (field.refer_namespace | array.add $result | array.each @cs_mapped_kwd | array.join '.')
    else if field.is_custom_class
        $result = (field.scope.namespace | array.add $result | array.each @cs_mapped_kwd | array.join '.')
    end

    if field.is_nullable
        if field.type == 'string'
        
        else if field.is_custom_class
        
        else
            $result = $result + '?'
        end
    end

    ret $result
end

func cs_access_nullable_value(value, field)
    if field.is_custom_class
        ret value + '.Value'
    else if field.type == 'string'
        ret value
    else if field.is_nullable
        ret value + '.Value'
    else if field.is_enum
        ret '(' + (field.fixed_namespace | array.add field.type | array.each @cs_mapped_kwd | array.join '.') + ')' + value
    else if field.is_primitive
        ret value
    else
        ret value + '()'
    end
end

func cs_create_field(raw_name, field)
    $result = ''
    $flatbuffer_offset = raw_name
    if field.name
        $flatbuffer_offset = $flatbuffer_offset + '.' + (field.name | upper_camel)
    end
    $flatbuffer_value = cs_access_nullable_value($flatbuffer_offset, field)

    if field.is_bound_nullable
        $casting_type = '(' + (field.fixed_namespace | array.add (field | @cs_type) | array.each @cs_mapped_kwd | array.join '.') + ')'
        $flatbuffer_value = $casting_type + $flatbuffer_value + '.Value'
    end

    if field.is_custom_class
        $value = 'new ' + field.type + '(' + $flatbuffer_value + ')'
    else if field.type == 'string'
        $value = $flatbuffer_value
    else if field.type == 'array'
        $value = 'Enumerable.Range(0, raw.' + (field.name | upper_camel) + 'Length).Select(i => raw.' + (field.name | upper_camel) + '(i)).Select(x => ' + cs_create_field('x', field.array_element) + ').ToList()'
    else if field.is_enum
        $value = $flatbuffer_value
    else
        $value = $flatbuffer_value
    end

    if field.is_nullable && field.type != 'string'
        $result = $flatbuffer_offset + ' != null ? ' + $value + ' : null'
    else
        $result = $value
    end

    ret $result
end

func cs_default_value(field)
    $result = ''
    if field.init
        $result = field.init
    else if field.is_nullable
        $result = 'null'
    else if field.is_custom_class
        $result = 'new ' + cs_type(field) + '()'
    else
        case field.type
        when "string"
            $result = "string.Empty"
        when "byte", "ubyte", "short", "ushort", "int", "uint"
            $result = "0"
        when "long", "ulong"
            $result = "0L"
        when "float"
            $result = "0.0f"
        when "double"
            $result = "0.0"
        when "bool"
            $result = "false"
        when "array"
            $result = "new " + cs_type(field) + '()'
        end
    end

    if $result != ''
        $result = ' = ' + $result + ';'
    end

    ret $result
end

func cs_field_size(field)
    if field.is_nullable
        ret 4
    end

    case field.type
    when 'byte', 'ubyte', 'bool'
        ret 1
    when 'short', 'ushort'
        ret 2
    when 'int', 'uint', 'float'
        ret 4
    when 'long', 'ulong', 'double'
        ret 8
    end

    ret 4
end
~}}
using Google.FlatBuffers;
using nullable;

namespace Google.FlatBuffers
{
    public interface IFlatBufferEx
    {
        int ProtocolType { get; }
        byte[] Serialize();
    }
}

{{~ for scope in context.scopes ~}}
namespace {{ scope.namespace | array.each @cs_mapped_kwd | array.join '.' }}
{
    public static class FlatBufferBuilderEx
    {
        public static T Build<T>(this FlatBufferBuilder builder, T value)
        {
            return value;
        }

        public static StringOffset Build(this FlatBufferBuilder builder, string value)
        {
            return builder.CreateString(value);
        }

{{~ for nullable_field in context.nullable_fields ~}}
{{~ if nullable_field.is_primitive ~}}
        public static Offset<nullable_{{ nullable_field.type }}> Build(this FlatBufferBuilder builder, {{ nullable_field | @cs_type }} value)
        {
            if (value.HasValue)
                return nullable.nullable_{{ nullable_field.type }}.Createnullable_{{ nullable_field.type }}(builder, value.Value);
            else
                return default;
        }
{{~ end ~}}
{{~ end ~}}
{{~ for scope in context.scopes ~}}
{{~ for table in scope.tables ~}}
        public static Offset<{{ table.scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }}> Build(this FlatBufferBuilder builder, {{ table.scope.namespace | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }} value)
        {
            if (value == null)
                return default;

{{~ if (table.fields | array.size) > 0 ~}}
            return {{ table.scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }}.Create{{ table.name }}(builder,
{{~ for field in table.fields ~}}
                builder.Build(value.{{ field.name | upper_camel }}){{ if !for.last }},
{{~ end ~}}
{{~ end ~}});
{{~ else ~}}
            {{ table.scope.namespace | array.add 'raw' | array.each @cs_mapped_kwd | array.add table.name | array.add ('Start' + table.name) | array.join '.'}}(builder);
            return {{ table.scope.namespace | array.add 'raw' | array.each @cs_mapped_kwd | array.add table.name | array.add ('End' + table.name) | array.join '.'}}(builder);
{{~ end ~}}
        }
{{~ end ~}}
{{~ end ~}}
{{~ for field in context.array_fields ~}}
        public static VectorOffset Build(this FlatBufferBuilder builder, List<{{ field.array_element | @cs_type }}> value)
        {
{{~ if field.array_element.is_primitive ~}}
            builder.StartVector(1, value.Count, {{ field.array_element | @cs_field_size}});
{{~ if field.array_element.is_nullable ~}}
            builder.Add(value.Select(x => builder.Build(x)).ToArray());
{{~ else ~}}
            builder.Add(value.ToArray());
{{~ end ~}}
            return builder.EndVector();
{{~ else ~}}
            return builder.CreateVectorOfTables<{{ field.array_element.fixed_namespace | array.add 'raw' | array.add field.array_element.type | array.each @cs_mapped_kwd | array.join '.' }}>(value.Select(x => Build(builder, x)).ToArray());
{{~ end ~}}
        }
{{~ end ~}}
{{~ for scope in context.scopes ~}}
{{~ for enum in scope.enums ~}}
        public static {{ enum.scope.namespace | array.add 'raw' | array.add enum.name | array.each @cs_mapped_kwd | array.join '.' }} Build(this FlatBufferBuilder builder, {{ enum.scope.namespace | array.add enum.name | array.each @cs_mapped_kwd | array.join '.' }} value)
        {
            return ({{ enum.scope.namespace | array.add 'raw' | array.add enum.name | array.each @cs_mapped_kwd | array.join '.' }})value;
        }
{{~ end ~}}
{{~ end ~}}
    }

    public enum FlatBufferProtocolType
    { 
{{~ for table in scope.tables ~}}
        {{ table.name }}{{ if !for.last }},{{ end }}
{{~ end ~}}
    }
}
{{~ end ~}}

{{~ for scope in context.scopes ~}}
namespace {{ scope.namespace | array.each @cs_mapped_kwd | array.join '.' }}
{
{{~ for enum in scope.enums ~}}
    public enum {{ enum.name }}
    {
{{~ for value in enum.values ~}}
        {{ value }},
{{~ end ~}}
    }
{{~ end ~}}

{{~ for table in scope.tables ~}}
    public class {{ table.name }} : IFlatBufferEx
    {
        public int ProtocolType => (int)FlatBufferProtocolType.{{ table.name }};
{{~ for field in table.fields ~}}
        public {{ field | @cs_type }} {{ field.name | upper_camel }} { get; set; }{{ field | @cs_default_value }}
{{~ end ~}}

        public {{ table.name }}()
        { }

        public {{ table.name }}({{ scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }} raw)
        {
{{~ for field in table.fields ~}}
            {{ field.name | upper_camel }} = {{ cs_create_field('raw', field) }};
{{~ end ~}}
        }

        public {{ table.name }}(byte[] bytes) : this({{ scope.namespace | array.add 'raw' | array.add table.name | array.each @cs_mapped_kwd | array.join '.' }}.GetRootAs{{ table.name }}(new ByteBuffer(bytes)))
        { }

        public byte[] Serialize()
        {
            var builder = new FlatBufferBuilder(1);
            var offset = builder.Build(this);
            builder.Finish(offset.Value);
            return builder.SizedByteArray();
        }

        public static {{ table.name }} Deserialize(byte[] bytes)
        {
            return new {{ table.name }}(bytes);
        }
    }
{{~ end ~}}

    public static class FlatBufferProtocolRouter
    {
        public static Type GetProtocolType(FlatBufferProtocolType protocolType)
        {
            return protocolType switch
            {
{{~ for table in scope.tables ~}}
                FlatBufferProtocolType.{{ table.name }} => typeof({{ scope.namespace | array.add table.name | array.each @cs_mapped_kwd | array.join '.'}}),
{{~ end ~}}
                _ => throw new ArgumentException(),
            };
        }
    }
}
{{~ end ~}}