{{~
func cs_namespace(namespace)
    ret namespace | array.each @cs_replace_reserved_keyword | array.join '.'
end

func cs_type(field)
    $prefix = ''
    if field.refer_namespace
        $prefix = (field.refer_namespace | @cs_namespace) + '.'
    end

    if field | @is_enum
        ret $prefix + field.type
    end

    case field.type
        when "array"
            ret $prefix + "List<" + (field.array_element | @cs_type) + ">"
        when "ubyte"
            ret $prefix + "byte"
        when "byte"
            ret $prefix + "sbyte"
        else
            ret $prefix + field.type
    end
end

func create_field(field, custom_namespace)
    if field | @is_custom_table
        ret (field.name | @upper_camel) + '.Build(builder)'
    end

    if field | @is_enum
        if (field.refer_namespace | array.size) > 0
            $cast = field.refer_namespace | array.concat ['origin', field.type] | array.each @cs_replace_reserved_keyword | array.join '.'
        else
            $cast = namespace | array.concat ['origin', field.type] | array.each @cs_replace_reserved_keyword | array.join '.'
        end
        ret '(' + $cast + ')' + (field.name | @upper_camel)
    end

    case field.type
        when "string"
            ret "builder.CreateString(" + (field.name | @upper_camel) + ")"
        when "array"
            if field | @is_custom_array
                ret (custom_namespace | @cs_namespace) + '.Create' + (field.name | @upper_camel) + 'Vector(builder, ' + (field.name | @upper_camel) + '.ConvertAll(x => x.Build(builder)).ToArray())'
            else
                ret (custom_namespace | @cs_namespace) + '.Create' + (field.name | @upper_camel) + 'Vector(builder, ' + (field.name | @upper_camel) + '.ToArray())'
            end
        else
            ret field.name | @upper_camel
    end
end

func cs_init_value(field)
    if field | @is_custom_table
        ret 'new ' + field.type + '(raw.' + (field.name | @upper_camel) + '.Value)'
    else if field | @is_custom_array
        ret 'Enumerable.Range(0, raw.' + (field.name | @upper_camel) + 'Length).Select(i => new ' + field.array_element.type + '(raw.' + (field.name | @upper_camel) + '(i).Value)).ToList()'
    else if field | @is_array
        ret 'Enumerable.Range(0, raw.' + (field.name | @upper_camel) + 'Length).Select(i => raw.' + (field.name | @upper_camel) + '(i)).ToList()'
    else if field | @is_enum
        if (field.refer_namespace | array.size) > 0
            $cast = field.refer_namespace | array.add field.type | array.each @cs_replace_reserved_keyword | array.join '.'
        else
            $cast = namespace | array.add field.type | array.each @cs_replace_reserved_keyword | array.join '.'
        end
        ret '(' + $cast + ')raw.' + (field.name | @upper_camel)
    else
        ret 'raw.' + (field.name | @upper_camel)
    end
end

func cs_init_rvalue(field)
    $prefix = ' = '
    $suffix = ';'
    if field.init == ''
        if field.type == 'string'
            ret $prefix + 'string.Empty' + $suffix
        else
            ret ''
        end
    else if field | @is_enum
        ret $prefix + (namespace | @cs_namespace) + '.' + field.type + '.' + field.init + $suffix
    else
        ret $prefix + field.init + $suffix
    end
end
~}}
using Google.FlatBuffers;

namespace {{ namespace | cs_namespace }}
{
{{~ if (enums | array.size) > 0 ~}}
{{~ for enum in enums ~}}
    public enum {{ enum.name }} : {{ {type: enum.type} | @cs_type }}
    {
{{~ for value in enum.values ~}}
        {{ value }} = {{ namespace | array.add 'origin' | array.add enum.name | @cs_namespace }}.{{ value }}{{ if !for.last }},{{ end }}
{{~ end ~}}
    }
{{~ end ~}}

{{~ end ~}}
{{~ for table in tables~}}
    public class {{ table.name }}{{ if table.root }} : IFlatBufferEx{{ end }}
    {
{{~ if table.root ~}}
        public int ProtocolType => (int)FlatBufferProtocolType.{{ table.name }};
{{~ end ~}}
{{~ for field in table.fields ~}}
        public {{ field | @cs_type }} {{ field.name | @upper_camel }} { get; set; }{{ field | @cs_init_rvalue }}
{{~ end ~}}

        public {{ table.name }}()
        { }

        public {{ table.name }}({{ cs_namespace(namespace | array.add 'origin' | array.add table.name) }} raw)
        {
{{~ for field in table.fields ~}}
            {{ field.name | @upper_camel }} = {{ field | @cs_init_value }};
{{~ end ~}}
        }

{{~ if table.root ~}}
        public {{ table.name }}(byte[] bytes) : this({{ namespace | array.add 'origin' | @cs_namespace }}.{{ table.name }}.GetRootAs{{ table.name }}(new ByteBuffer(bytes)))
        { }
{{~ end ~}}

        public Offset<{{ cs_namespace(namespace | array.add 'origin' | array.add table.name) }}> Build(FlatBufferBuilder builder)
        {
{{~ if (table.fields | array.size) > 0 ~}}
            return {{ namespace | array.add 'origin' | @cs_namespace }}.{{ table.name }}.Create{{ table.name }}(builder{{~ if (table.fields | array.size) > 0~}},
{{~ for field in table.fields ~}}
                {{ create_field field (namespace | array.add 'origin' | array.add table.name) }}{{ if !for.last}},
{{ end }}{{~ end ~}}{{~ end ~}});
{{~ else ~}}
            {{ namespace | array.add 'origin' | @cs_namespace }}.{{ table.name }}.Start{{ table.name }}(builder);
            return {{ namespace | array.add 'origin' | @cs_namespace }}.{{ table.name }}.End{{ table.name }}(builder);
{{~ end ~}}
        }
{{~ if table.root ~}}

        public byte[] Serialize()
        {
            var builder = new FlatBufferBuilder(1);
            var offset = Build(builder);
            builder.Finish(offset.Value);
            return builder.SizedByteArray();
        }

        public static {{ table.name }} Deserialize(byte[] bytes)
        {
            return new {{ table.name }}(bytes);
        }
{{~ end ~}}
    }
{{~ end ~}}
}
