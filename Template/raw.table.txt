{{~
func generate_type(field)
  type = field.type
  if field.is_nullable
    type = 'nullable_' + (field.fixed_namespace | array.add type | array.join ('_') | string.downcase)
    type = 'nullable.' + type
  end

  $result = ''
  if field.type == 'array'
    $result = '[' + generate_type(field.array_element) + ']'
  else
    if field.refer_namespace
      if field.is_nullable
        $result = type
      else
        $result = (field.refer_namespace | array.add 'raw' | array.add type | array.join '.')
      end
    else
      $result = type
    end
  end

  ret $result
end
~}}
{{~ for nullable_field in nullable_fields ~}}
include "nullable_{{ nullable_field.fixed_namespace | array.add nullable_field.type | array.join '_' | string.downcase }}.fbs";
{{~ end ~}}
{{~ for reference_file in reference_files ~}}
include "{{ reference_file }}.fbs";
{{~ end ~}}

namespace {{ scope.namespace | array.add 'raw' | array.join '.' }};

table {{ name }} {
{{~ for field in fields ~}}
  {{ field.name }}: {{ field | generate_type }};
{{~ end ~}}
}
root_type {{ name }};