{{~
func generate_type(field)
    if field.type == 'array'
        ret '[' + generate_type(field.array_element) + ']'
    end

    $ns = field.fixed_namespace
    if ($ns | array.size) > 0
        $ns = $ns | array.add 'raw'
    end

    $result = $ns | array.add field.type | array.each @mapped_kwd | array.join '.'

    if field.is_nullable
        if field.is_custom_class

        else if field.type == 'string'

        else
            $result = 'nullable.' + (['nullable'] | array.concat field.fixed_namespace | array.add field.type | array.each @mapped_kwd | array.join '_' | string.downcase)
        end
    end
    ret $result
end

func mapped_kwd(value)
    ret to_mapped_kwd(lang, value)
end
~}}
{{~ for nullable_field in table.nullable_fields ~}}
{{~ if nullable_field.is_primitive || nullable_field.is_enum ~}}
include "nullable_{{ nullable_field.fixed_namespace | array.add nullable_field.type | array.join '_' | string.downcase }}.fbs";
{{~ end ~}}
{{~ end ~}}
{{~ for reference_file in table.reference_files ~}}
include "{{ reference_file }}.fbs";
{{~ end ~}}

namespace {{ table.scope.namespace | array.add 'raw' | array.each @mapped_kwd | array.join '.' }};

table {{ table.name }} {
{{~ for field in table.fields ~}}
    {{ field.name }}: {{ field | generate_type }};
{{~ end ~}}
}
root_type {{ table.name }};