{{~
func cpp_namespace(namespace)
    ret namespace | array.join '::'
end

func create_field(field)
    if field | @is_custom_table
        ret "this->" + field.name + ".Build(builder)"
    end

    if field | @is_enum
        if (field.refer_namespace | array.size) > 0
            $cast = field.refer_namespace | array.add 'origin' | array.add field.type | array.join '::'
        else
            $cast = namespace | array.add 'origin' | array.add field.type | array.join '::'
        end
        ret '(' + $cast + ')this->' + field.name
    end

    case field.type
        when "string"
            ret "builder.CreateString(this->" + field.name + ")"
        when "array"
            if field.array_element.type | @is_prime_type
                ret "builder.CreateVector(this->" + field.name + ")"
            else
                ret "this->Create" + (field.name | string.capitalize) + "(builder)"
            end
        else
            ret "this->" + field.name
    end
end

func cpp_type(field)
    $prefix = ''
    if field.refer_namespace
        $prefix = (field.refer_namespace | @cpp_namespace) + '::'
    end

    if field | @is_enum
        ret $prefix + field.type
    end

    case field.type
        when "string"
            ret "std::string"
        when "byte"
            ret "int8_t"
        when "ubyte"
            ret "uint8_t"
        when "short"
            ret "int16_t"
        when "ushort"
            ret "uint16_t"
        when "uint"
            ret "uint32_t"
        when "ulong"
            ret "unsigned long"
        when "array"
            ret "std::vector<" + (field.array_element | @cpp_type) + ">"
        else
            ret $prefix + field.type
    end
end

func cpp_param_type(field)
    $result = field | @cpp_type
    if field | @is_class_type
        ret "const " + $result + "&"
    else
        ret $result
    end
end

func cpp_right_value(field)
    if field | @is_custom_table
        ret '*raw.' + field.name + '()'
    else if field.type == 'string'
        ret 'raw.' + field.name + '()->c_str()'
    else if field | @is_enum
        if (field.refer_namespace | array.size) > 0
            $cast = field.refer_namespace | array.add field.type | array.join '::'
        else
            $cast = namespace | array.add field.type | array.join '::'
        end
        ret '(' + $cast + ')raw.' + field.name + '()'
    else
        ret 'raw.' + field.name + '()'
    end
end
~}}
#ifndef __{{ namespace | array.add file | array.each @string.upcase | array.join '_' | string.replace '.' '_' }}__
#define __{{ namespace | array.add file | array.each @string.upcase | array.join '_' | string.replace '.' '_' }}__

#include "flatbuffers/flatbuffers.h"
{{~ for include in includes ~}}
#include <{{ include_path }}/{{ include }}.h>
{{~ end ~}}
{{~ for file in files ~}}
#include <{{ include_path }}/origin/{{ file }}_generated.h>
{{~ end ~}}
#include <{{ include_path }}/protocol_type.h>
#include <string>
#include <vector>

{{ for n in namespace }}namespace {{ n }} { {{ end }}

{{~ for enum in enums ~}}
enum class {{ enum.name}} : {{ {type: enum.type } | @cpp_type }}
{
{{~ for value in enum.values ~}}
    {{ value }} = {{ namespace | array.add 'origin' | array.join '::' }}::{{ enum.name }}::{{ enum.name }}_{{ value }}{{ if !for.last }},{{ end }}
{{~ end ~}}
};
{{~ end ~}}

{{~ for table in tables ~}}
class {{ table.name }}
{
{{~ if table.root ~}}
public:
    static inline {{ namespace | array.join '::' }}::FlatBufferProtocolType FlatBufferProtocolType = {{ namespace | array.join '::' }}::FlatBufferProtocolType::{{ table.name }};
{{~ end ~}}

public:
{{~ for field in table.fields ~}}
    {{ field | @cpp_type }} {{ field.name }};
{{~ end ~}}

public:
    {{ table.name }}()
    { }

    {{ table.name }}(const {{ table.name }}& x){{ if table.fields }}{{ if (table.fields | array.size) > 0 }}
        : {{ end }}{{ for field in table.fields}}{{ field.name }}(x.{{ field.name }}){{ if !for.last }}, {{ end }}{{ end }}{{ end }}
    { }

{{~ if (table.fields | array.size) > 0 ~}}
    {{ table.name }}({{ for field in table.fields }}{{ field | @cpp_param_type }} {{ field.name }}{{ if !for.last }}, {{ end }}{{ end }}){{ if table.fields }}
        : {{ for field in table.fields }}{{ field.name }}({{ field.name }}){{ if !for.last }}, {{ end }}{{ end }}{{ end }}
    { }
{{~ end ~}}
    {{ table.name }}(const {{ cpp_namespace(namespace | array.add 'origin') }}::{{ table.name }}& raw){{ for field in table.fields | array.filter @is_non_array }}{{ if for.first }}
        : {{ end }}{{ field.name }}({{ field | @cpp_right_value }}){{ if !for.last }}, {{ end }}{{ end }}
{{~ if (table.fields | array.size) == 0 ~}}
    { }
{{~ else ~}}
    {
{{~ for field in table.fields | array.filter @is_array ~}}
        for (int i = 0; i < raw.{{ field.name }}()->size(); i++)
            this->{{ field.name }}.push_back({{ if field | @is_custom_array }}*{{ end }}raw.{{ field.name }}()->Get(i));
{{~ if !for.last ~}}

{{~ end ~}}
{{~ end ~}}
    }
{{~ end ~}}

{{~ for field in table.fields | array.filter @is_custom_array ~}}
{{ if for.first }}private:{{ end }}
    auto Create{{ field.name | string.capitalize }}(flatbuffers::FlatBufferBuilder& builder)
    {
{{~ if field.array_element.refer_namespace ~}}
        auto result = std::vector<flatbuffers::Offset<{{ cpp_namespace(field.array_element.refer_namespace | array.add 'origin') }}::{{ {type: field.array_element.type} | @cpp_type }}>>();
{{~ else ~}}
        auto result = std::vector<flatbuffers::Offset<{{ cpp_namespace(namespace | array.add 'origin') }}::{{ field.array_element | @cpp_type }}>>();
{{~ end ~}}
        for(auto& x : this->{{ field.name }})
        {
            result.push_back(x.Build(builder));
        }

        return builder.CreateVector(result);
    }
{{~ end ~}}

public:
    auto Build(flatbuffers::FlatBufferBuilder& builder) const
    {
        return {{ cpp_namespace(namespace | array.add 'origin') }}::Create{{ table.name }}(builder{{~ if table.fields ~}}{{ if (table.fields | array.size) > 0 }},
{{~ for field in table.fields ~}}
            {{ field | @create_field }}{{ if !for.last }},
{{ end }}{{~ end ~}}{{~ end ~}}{{ end }});
    }

{{~ if table.root ~}}
    std::vector<uint8_t> Serialize() const
    {
        auto builder = flatbuffers::FlatBufferBuilder();
        builder.Finish(this->Build(builder));
        auto bytes = builder.GetBufferPointer();
        auto size = builder.GetSize();
        auto result = std::vector<uint8_t>(size);
        std::memcpy(result.data(), bytes, size);
        return result;
    }

    static {{ table.name }} Deserialize(const uint8_t* bytes)
    {
        auto raw = {{ namespace | array.add 'origin' | @cpp_namespace }}::Get{{ table.name }}(bytes);
        return {{ table.name }}(*raw);
    }
{{~ end ~}}
};
{{~ if !for.last ~}}

{{~ end ~}}
{{~ end ~}}

{{ for n in namespace }} } {{ end }}

#endif